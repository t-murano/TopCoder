import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class WakingUpEasy:
    def countAlarms(self, volume, S):
    	i = 0
        while S > 0:
        	S -= volume[i%len(volume)]
        	i += 1 
        return i

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p1))
	print(str("]"))
	obj = WakingUpEasy()
	startTime = time.clock()
	answer = obj.countAlarms(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p2))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (5,2,4)
p1 = 13
p2 = 4
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (5,2,4)
p1 = 3
p2 = 1
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (1,)
p1 = 10000
p2 = 10000
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (42,68,35,1,70,25,79,59,63,65,6,46,82,28,62,92,96,43,28,37,92,5,3,54,93,83,22,17,19,96,48,27,72,39,70,13,68,100,36,95,4,12,23,34,74,65,42,12,54,69)
p1 = 9999
p2 = 203
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Alex is sleeping soundly. At any moment, his sleepiness can be characterized by an integer. You are given an integer S that represents Alex's initial sleepiness.
# 
# Unfortunately, several alarms are going to disturb him. These alarms will be ringing in a cyclic order. Each alarm is characterized by its volume.
# 
# You are given a list of alarm volumes in a tuple (integer) volume in the order in which the alarms are going to ring. Every minute the first alarm on the list rings, and Alex's sleepiness instantly decreases by its volume. The alarm is then moved to the end of the alarm list.
# 
# While Alex's sleepiness is positive, he's still sleeping. Once it becomes less than or equal to zero, Alex immediately wakes up.
# 
# Return the number of alarms after which Alex will wake up.
# 
# 
# DEFINITION
# Class:WakingUpEasy
# Method:countAlarms
# Parameters:tuple (integer), integer
# Returns:integer
# Method signature:def countAlarms(self, volume, S):
# 
# 
# CONSTRAINTS
# -volume will contain between 1 and 50 elements, inclusive.
# -Each element of volume will be between 1 and 100, inclusive.
# -S will be between 1 and 10000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {5, 2, 4}
# 13
# 
# Returns: 4
# 
# 
# Initially, Alex's sleepiness is 13, and the list of alarms is {5, 2, 4}.
# After the first alarm, Alex's sleepiness is 8. The list of alarms becomes {2, 4, 5}.
# After the second alarm, Alex's sleepiness is 6. The list of alarms becomes {4, 5, 2}.
# After the third alarm, Alex's sleepiness is 2. The list of alarms becomes {5, 2, 4}.
# After the fourth alarm, Alex's sleepiness is -3, so Alex wakes up.
# 
# 
# 
# 1)
# {5, 2, 4}
# 3
# 
# Returns: 1
# 
# The first alarm is enough here.
# 
# 2)
# {1}
# 10000
# 
# Returns: 10000
# 
# The only alarm has to ring 10000 times before Alex finally wakes up.
# 
# 3)
# {42, 68, 35, 1, 70, 25, 79, 59, 63, 65, 6, 46, 82, 28, 62, 92, 96, 43, 28, 37,
#   92, 5, 3, 54, 93, 83, 22, 17, 19, 96, 48, 27, 72, 39, 70, 13, 68, 100, 36,
#   95, 4, 12, 23, 34, 74, 65, 42, 12, 54, 69}
# 9999
# 
# Returns: 203
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
