import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class PackingBallsDiv2:
    def minPacks(self, R, G, B):
        nomal_3 = R/3 + G/3 + B/3
        rest = sorted([R%3, G%3, B%3])
        return nomal_3 + rest[0] + math.ceil((rest[1] + rest[2] - rest[0]*2) / 2.0)
        
        # array = [R, G, B]
        # array.sort()
        # rest1 = array[1] - array[0]
        # rest2 = array[2] - array[0]
        # nomal1 = rest1 / 3
        # nomal2 = rest2 / 3
        # other = rest1%3 + rest2%3
        # another = other/2 + other%2
        # return array[0] + nomal1 + nomal2 + another

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
    sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1) + str(",") + str(p2))
    print(str("]"))
    obj = PackingBallsDiv2()
    startTime = time.clock()
    answer = obj.minPacks(p0, p1, p2)
    endTime = time.clock()
    res = True
    print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
    if (hasAnswer):
        res = answer == p3
    
    if (not res):
        print(str("DOESN'T MATCH!!!!"))
        if (hasAnswer):
            print(str("Desired answer:"))
            print(str("\t") + str(p3))
        
        print(str("Your answer:"))
        print(str("\t") + str(answer))
    elif ((endTime - startTime) >= 2):
        print(str("FAIL the timeout"))
        res = False
    elif (hasAnswer):
        print(str("Match :-)"))
    else:
        print(str("OK, but is it right?"))
    
    print(str(""))
    return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 4
p1 = 2
p2 = 4
p3 = 4
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 1
p1 = 7
p2 = 1
p3 = 3
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 2
p1 = 3
p2 = 5
p3 = 4
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 78
p1 = 53
p2 = 64
p3 = 66
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 100
p1 = 100
p2 = 100
p3 = 100
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
    if (tests_disabled):
        print(str("You're a stud (but some test cases were disabled)!"))
    else:
        print(str("You're a stud (at least on given cases)!"))
    
else:
    print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# We have R red, G green, and B blue balls.
# We want to divide them into as few packages as possible.
# Each package must contain 1, 2, or 3 balls.
# Additionally, each package must be either a "normal set" (all balls in the package have the same color), or a "variety set" (no two balls have the same color).
# Compute and return the smallest possible number of packages.
# 
# DEFINITION
# Class:PackingBallsDiv2
# Method:minPacks
# Parameters:integer, integer, integer
# Returns:integer
# Method signature:def minPacks(self, R, G, B):
# 
# 
# CONSTRAINTS
# -R, G, and B will each be between 1 and 100, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 4
# 2
# 4
# 
# Returns: 4
# 
# We have 4 red, 2 green, and 4 blue balls.
# Clearly, we need at least four packages to store 10 balls.
# One possibility of using exactly four packages looks as follows: RGB, RG, RR, BBB.
# (I.e., the first package has 1 ball of each color, the second package has a red and a green ball, and so on.)
# 
# 1)
# 1
# 7
# 1
# 
# Returns: 3
# 
# Here the only possible solution is to have one package with RGB and two packages with GGG each.
# 
# 2)
# 2
# 3
# 5
# 
# Returns: 4
# 
# 
# 
# 3)
# 78
# 53
# 64
# 
# Returns: 66
# 
# 
# 
# 4)
# 100
# 100
# 100
# 
# Returns: 100
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
