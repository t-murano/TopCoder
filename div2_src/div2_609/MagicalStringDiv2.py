import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class MagicalStringDiv2:
    def minimalMoves(self, S):
        return S[0:len(S)/2].count('<') + S[len(S)/2:len(S)].count('>')

        # count = 0
        # for i in range(0, len(S)/2):
        # 	if S[i:i+1] == '<':
        # 		count += 1
        # for i in range(len(S)/2, len(S)):
        # 	if S[i:i+1] == '>':
        # 		count += 1

        # return count

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
	print(str("]"))
	obj = MagicalStringDiv2()
	startTime = time.clock()
	answer = obj.minimalMoves(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p1))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = ">><<><"
p1 = 2
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = ">>>><<<<"
p1 = 0
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "<<>>"
p1 = 4
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "<><<<>>>>><<>>>>><>><<<>><><><><<><<<<<><<>>><><><"
p1 = 20
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Magical Girl Illy uses "magical strings" to cast spells.
# For her, a string X is magical if and only if there exists a positive integer k such that X is composed of k consecutive '>' characters followed by k consecutive '<' characters.
# 
# Once Illy picked up a string S.
# The length of S was even, and each character of S was either '<' or '>'.
# Illy wants to change S into a magical string.
# In each step, she can change a single '>' to a '<' or vice versa.
# Compute and return the smallest number of steps in which she can change S into a magical string.
# 
# DEFINITION
# Class:MagicalStringDiv2
# Method:minimalMoves
# Parameters:string
# Returns:integer
# Method signature:def minimalMoves(self, S):
# 
# 
# CONSTRAINTS
# -S will contain between 2 and 50 characters, inclusive.
# -S will contain even number of characters.
# -Each character of S will be '<' or '>'.
# 
# 
# EXAMPLES
# 
# 0)
# ">><<><"
# 
# Returns: 2
# 
# She needs to change character 2 (0-based index) from '<' to '>', and character 4 from '>' to '<'.
# 
# 1)
# ">>>><<<<"
# 
# Returns: 0
# 
# S is already a magical string, so no changes are needed.
# 
# 2)
# "<<>>"
# 
# Returns: 4
# 
# 
# 
# 3)
# "<><<<>>>>><<>>>>><>><<<>><><><><<><<<<<><<>>><><><"
# 
# Returns: 20
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
