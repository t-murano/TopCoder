import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class FibonacciDiv2:
	def find(self, N):
		pre = 0
		z = self.fib()
		while True:
			f = z.next()
			if f == N:
				result = 0
				break
			elif f > N:
				result = min(N - pre, f - N)
				break
			pre = f
		return result

	def fib(self):
		x, y = 0, 1
		while True:
			yield x
			x, y = y, x + y

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0))
	print(str("]"))
	obj = FibonacciDiv2()
	startTime = time.clock()
	answer = obj.find(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p1))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 1
p1 = 0
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 13
p1 = 0
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 15
p1 = 2
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 19
p1 = 2
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 1000000
p1 = 167960
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# The Fibonacci sequence is defined as follows:
# 
# F[0] = 0
# F[1] = 1
# for each i >= 2: F[i] = F[i-1] + F[i-2]
# 
# Thus, the Fibonacci sequence starts as follows: 0, 1, 1, 2, 3, 5, 8, 13, ...
# The elements of the Fibonacci sequence are called Fibonacci numbers.
# 
# You're given an integer N.
# You want to change N into a Fibonacci number.
# This change will consist of zero or more steps.
# In each step, you can either increment or decrement the number you currently have.
# That is, in each step you can change your current number X either to X+1 or to X-1.
# 
# Return the smallest number of steps needed to change N into a Fibonacci number.
# 
# DEFINITION
# Class:FibonacciDiv2
# Method:find
# Parameters:integer
# Returns:integer
# Method signature:def find(self, N):
# 
# 
# CONSTRAINTS
# -N will be between 1 and 1,000,000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 1
# 
# Returns: 0
# 
# The number 1 is already a Fibonacci number. No changes are necessary.
# 
# 1)
# 13
# 
# Returns: 0
# 
# The number 13 is also a Fibonacci number.
# 
# 2)
# 15
# 
# Returns: 2
# 
# The best way to change 15 into a Fibonacci number is to decrement it twice in a row (15 -> 14 -> 13).
# 
# 3)
# 19
# 
# Returns: 2
# 
# You can increase it by 2 to get 21.
# 
# 4)
# 1000000
# 
# Returns: 167960
# 
# This is the biggest possible number that you can get as input.
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
