import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class BoxesDiv2:
    def findSize(self, candyCounts):
    	z = self.gen()
    	array = [z.next() for i in xrange(30)]
        boxes = []
        tmp = 0
        for can in candyCounts:
        	for box in array:
        		if box >= can:
        			boxes.append(box)
        			tmp += box
        			break
        for box in array:
        	if box >= tmp:
        		result = box
        		break
        return result

    def gen(self):
    	x = 1
    	while True:
    		yield x
    		x *= 2

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = BoxesDiv2()
	startTime = time.clock()
	answer = obj.findSize(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p1))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (8,8)
p1 = 16
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (5,6)
p1 = 16
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (1,7)
p1 = 16
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (1,1,13,1,1)
p1 = 32
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
p1 = 1024
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Today is Fox Ciel's birthday.
# You want to give her a box of candies as a present.
# 
# You have candies of several different types.
# You are given a tuple (integer) candyCounts.
# Each element of candyCounts is the number of candies of one particular type.
# 
# For each non-negative integer i, you have an unlimited supply of boxes with volume 2^i.
# That is, you have boxes with volume 1, 2, 4, 8, and so on.
# 
# You are going to pack the candies into boxes.
# Each type of candies has to be packed into a single box, and you have to use different boxes for different types of candy.
# The volume of a box must be greater than or equal to the number of candies it contains.
# 
# Once you have each type of candies in a box, you want to pack those boxes into larger boxes, until only one box remains.
# You can only pack two boxes at a time.
# That is, you can take any two boxes you currently have, get a new box, and put the two old boxes into the new box.
# This is possible if and only if the volume of the new box is greater than or equal to the sum of volumes of the two old boxes.
# You always get to choose which two boxes you want to pack together, and how large the new box should be.
# 
# To summarize:
# 
# First, you will pack all the candies into boxes.
# Then, you will pack all those boxes into larger boxes, until you are left with a single box that contains everything.
# 
# 
# Compute and return the smallest possible volume of the box obtained at the end of packing.
# 
# 
# DEFINITION
# Class:BoxesDiv2
# Method:findSize
# Parameters:tuple (integer)
# Returns:integer
# Method signature:def findSize(self, candyCounts):
# 
# 
# NOTES
# -You may assume that the return value always fits into a signed 32-bit integer variable.
# 
# 
# CONSTRAINTS
# -candyCounts will contain between 1 and 100 elements, inclusive.
# -Each element of candyCounts will be between 1 and 1000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {8,8}
# 
# Returns: 16
# 
# First, you pack each type of candies into a box with volume 8. Then, you pack the two boxes into a single box with volume 16.
# 
# 1)
# {5,6}
# 
# Returns: 16
# 
# Even though you have fewer candies than in Example 0, you still have to use boxes with volume 8 (or more) to store them.
# 
# 2)
# {1,7}
# 
# Returns: 16
# 
# Now you could pack the 1 candy into a smaller box, but it will not help: you still have to use a box with volume 16 to store the two boxes with candies.
# 
# 3)
# {1,1,13,1,1}
# 
# Returns: 32
# 
# 
# 
# 4)
# {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}
# 
# Returns: 1024
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
