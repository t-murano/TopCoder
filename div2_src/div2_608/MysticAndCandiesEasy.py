import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class MysticAndCandiesEasy:
    def minBoxes(self, C, X, high):
        count = len(high)
        high = sorted(high)
        for box in high:
        	C -= box
        	if C < X:
        		break
        	count -= 1
        return count

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1) + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = MysticAndCandiesEasy()
	startTime = time.clock()
	answer = obj.minBoxes(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p3))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 10
p1 = 10
p2 = (20,)
p3 = 1
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 10
p1 = 7
p2 = (3,3,3,3,3)
p3 = 4
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 100
p1 = 63
p2 = (12,34,23,45,34)
p3 = 3
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 19
p1 = 12
p2 = (12,9,15,1,6,4,9,10,10,10,14,14,1,1,12,10,9,2,3,6,1,7,3,4,10,3,14)
p3 = 22
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 326
p1 = 109
p2 = (9,13,6,6,6,16,16,16,10,16,4,3,10,8,11,17,12,5,7,8,7,4,15,7,14,2,2,1,17,1,7,7,12,17,2,9,7,1,8,16,7,4,16,2,13,3,13,1,17,6)
p3 = 15
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# TopCoder admin mystic_tc is sitting in front of a table. He found N sealed boxes of candies on the table.
# 
# 
# He is not sure how many candies each box contains. However, he knows the following information:
# 
# The total number of candies in the boxes is C.
# For each i, box i (0-based index) contains between 0 and high[i] candies, inclusive.
# 
# 
# You know that mystic_tc eats candies as follows: first he chooses a subset of the boxes, then he opens them and eats all the candies he found inside.
# He wants to eat at least X candies.
# And as he is smart, he will always choose a subset of boxes for which he is sure that they must contain at least X candies.
# 
# 
# You are given the integers C and X, and the tuple (integer) high.
# Return the smallest number of boxes mystic_tc may choose.
# 
# DEFINITION
# Class:MysticAndCandiesEasy
# Method:minBoxes
# Parameters:integer, integer, tuple (integer)
# Returns:integer
# Method signature:def minBoxes(self, C, X, high):
# 
# 
# CONSTRAINTS
# -high will contain between 1 and 50 elements, inclusive.
# -Each element of high will be between 1 and 50, inclusive.
# -C will be between 1 and the sum of all elements of high, inclusive.
# -X will be between 1 and C, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 10
# 10
# {20}
# 
# Returns: 1
# 
# There is only one box. It contains all 10 candies. In order to eat 10 candies mystic_tc must open it.
# 
# 1)
# 10
# 7
# {3, 3, 3, 3, 3}
# 
# Returns: 4
# 
# Now there are many possibilities for the contents of boxes.
# For example, there could be three boxes with 3 candies each, one box with 1 candy, and one empty box.
# Another possibility is that there could be five boxes with 2 candies each.
# Note that in this case mystic_tc could open three boxes and still get only 6 candies, so he needs to open at least four boxes to be sure he gets at least 7 candies.
# And it can be proved that if mystic_tc opens any four of these boxes, they will always contain at least 7 candies in total.
# 
# 2)
# 100
# 63
# {12, 34, 23, 45, 34}
# 
# Returns: 3
# 
# Open boxes 1, 3, 4 (0-based). It can be proved that these boxes contain at least 65 candies in total.
# 
# 3)
# 19
# 12
# {12, 9, 15, 1, 6, 4, 9, 10, 10, 10, 14, 14, 1, 1, 12, 10, 9, 2, 3, 6, 1, 7, 3, 4, 10, 3, 14}
# 
# Returns: 22
# 
# 
# 
# 4)
# 326
# 109
# {9, 13, 6, 6, 6, 16, 16, 16, 10, 16, 4, 3, 10, 8, 11, 17, 12, 5, 7, 8, 7, 4, 15, 7, 14, 2, 2, 1, 17, 1, 7, 7, 12, 17, 2, 9, 7, 1, 8, 16, 7, 4, 16, 2, 13, 3, 13, 1, 17, 6}
# 
# Returns: 15
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
