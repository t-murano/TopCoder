import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class OneDimensionalRobotEasy:
    def finalPosition(self, commands, A, B):
        pos = 0
        for char in commands:
        	if char == "R" and pos < B:
        		pos += 1
        	elif char == "L" and pos > -A:
        		pos -= 1
        return pos

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, hasAnswer, p3):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str(p1) + str(",") + str(p2))
	print(str("]"))
	obj = OneDimensionalRobotEasy()
	startTime = time.clock()
	answer = obj.finalPosition(p0, p1, p2)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p3
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str(p3))
		
		print(str("Your answer:"))
		print(str("\t") + str(answer))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "RRLRRLLR"
p1 = 10
p2 = 10
p3 = 2
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "RRRRR"
p1 = 3
p2 = 4
p3 = 4
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "LLLLLLLLLLR"
p1 = 2
p2 = 6
p3 = -1
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "RRRRRRRLRRLRRRRRRRRRRRRLRLRRRRRRRRLRRRRRLRRRRRRRRR"
p1 = 5
p2 = 20
p3 = 20
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = "RLRLLLLLLLRLLLRLLLLLLLLRLLLLLRLLLRRLLLLLRLLLLLRLLL"
p1 = 34
p2 = 15
p3 = -30
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, True, p3) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# A robot is placed on an infinitely long line. Initially the position of the robot is 0. Cat Snuke sends commands to move this robot.
# 
# 
# You are given a string commands. For each i, the i-th character of commands (0-based index) represents the i-th command Snuke sends. If the i-th character of commands is 'R', the robot moves one unit to the right (i.e., from position x to position x+1). If this character is 'L', the robot moves one unit to the left (i.e., from position x to position x-1). The robot has a built-in safety mechanism that prevents it from going too far and losing the signal. The safety mechanism makes sure that the robot always stays between the positions -A and B, inclusive. If the robot receives the command 'R' when the robot is at B, or the command 'L' when the robot is at -A, the command will be ignored.
# 
# 
# You are given the string commands and the integers A and B. Return the final position of the robot.
# 
# DEFINITION
# Class:OneDimensionalRobotEasy
# Method:finalPosition
# Parameters:string, integer, integer
# Returns:integer
# Method signature:def finalPosition(self, commands, A, B):
# 
# 
# CONSTRAINTS
# -commands will contain between 1 and 50 characters, inclusive.
# -Each character in commands will be either 'R' or 'L'.
# -A and B will be between 1 and 50, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# "RRLRRLLR"
# 10
# 10
# 
# Returns: 2
# 
# The robot will move as follows: 0 -> 1 -> 2 -> 1 -> 2 -> 3 -> 2 -> 1 -> 2.
# 
# 1)
# "RRRRR"
# 3
# 4
# 
# Returns: 4
# 
# The robot will move as follows: 0 -> 1 -> 2 -> 3 -> 4 -> 4.
# 
# 2)
# "LLLLLLLLLLR"
# 2
# 6
# 
# Returns: -1
# 
# The robot will move as follows: 0 -> -1 -> -2 -> -2 -> -2 -> -2 -> -2 -> -2 -> -2 -> -2 -> -2 -> -1.
# 
# 3)
# "RRRRRRRLRRLRRRRRRRRRRRRLRLRRRRRRRRLRRRRRLRRRRRRRRR"
# 5
# 20
# 
# Returns: 20
# 
# 
# 
# 4)
# "RLRLLLLLLLRLLLRLLLLLLLLRLLLLLRLLLRRLLLLLRLLLLLRLLL"
# 34
# 15
# 
# Returns: -30
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
