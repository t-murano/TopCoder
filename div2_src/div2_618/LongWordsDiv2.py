import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class LongWordsDiv2:
    def find(self, word):
        alp = [unichr(i) for i in xrange(ord('A'), ord('Z') + 1)]
        for char in alp:
            if char + char in word: return 'Dislikes'
        comb = [c for c in itertools.combinations(word, 2)]
        for (i, j) in comb:
        	p1 = '[A-Z]*'.join([i,j,i,j])
        	p2 = '[A-Z]*'.join([j,i,j,i])
        	if re.search(p1, word) == None and re.search(p2, word) == None:
        		pass
        	else:
        		return 'Dislikes'
        return 'Likes'

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\""))
	print(str("]"))
	obj = LongWordsDiv2()
	startTime = time.clock()
	answer = obj.find(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str("\"") + str(p1) + str("\""))
		
		print(str("Your answer:"))
		print(str("\t") + str("\"") + str(answer) + str("\""))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "AAA"
p1 = "Dislikes"
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "ABCBA"
p1 = "Likes"
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "ABCBAC"
p1 = "Dislikes"
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "TOPCODER"
p1 = "Likes"
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = "VAMOSGIMNASIA"
p1 = "Dislikes"
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = "SINGLEROUNDMATCH"
p1 = "Likes"
all_right = (disabled or KawigiEdit_RunTest(5, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 6 -----
disabled = False
p0 = "DALELOBO"
p1 = "Likes"
all_right = (disabled or KawigiEdit_RunTest(6, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Fox Ciel likes all the words that have the following properties:
# 
# Each letter of the word is an uppercase English letter.
# Equal letters are never consecutive.
# There is no subsequence of the form xyxy, where x and y are (not necessarily distinct) letters. Note that a subsequence doesn't have to be contiguous.
# 
# Examples:
# 
# Ciel does not like "ABBA" because there are two consecutive 'B's.
# Ciel does not like "THETOPCODER" because it contains the subsequence "TETE".
# Ciel does not like "ABACADA" because it contains the subsequence "AAAA". (Note that here x=y='A'.)
# Ciel likes "A", "ABA", and also "ABCBA".
# 
# Given a string word, return "Likes" (quotes for clarity) if Ciel likes word and "Dislikes" if she does not.
# 
# 
# DEFINITION
# Class:LongWordsDiv2
# Method:find
# Parameters:string
# Returns:string
# Method signature:def find(self, word):
# 
# 
# CONSTRAINTS
# -word will contain between 1 and 100 characters, inclusive.
# -Each character of word will be an uppercase English letter ('A'-'Z').
# 
# 
# EXAMPLES
# 
# 0)
# "AAA"
# 
# Returns: "Dislikes"
# 
# 
# 
# 1)
# "ABCBA"
# 
# Returns: "Likes"
# 
# 
# 
# 2)
# "ABCBAC"
# 
# Returns: "Dislikes"
# 
# 
# 
# 3)
# "TOPCODER"
# 
# Returns: "Likes"
# 
# 
# 
# 4)
# "VAMOSGIMNASIA"
# 
# Returns: "Dislikes"
# 
# 
# 
# 5)
# "SINGLEROUNDMATCH"
# 
# Returns: "Likes"
# 
# 
# 
# 6)
# "DALELOBO"
# 
# Returns: "Likes"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
