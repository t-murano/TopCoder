import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class CandidatesSelectionEasy:
    def sort(self, score, x):
    	l = [[i, ord(c[x])] for i, c in enumerate(score)]
    	l2 = sorted(l, key=lambda x : x[1])
        l3 = [x[0] for x in l2]
        return tuple(l3)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}") + str(",") + str(p1))
	print(str("]"))
	obj = CandidatesSelectionEasy()
	startTime = time.clock()
	answer = obj.sort(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		if (len(answer) != len(p2)):
			res = False
		else:
			for i in range(len(answer)):
				if (answer[i] != p2[i]):
					res = False
				
			
		
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			sys.stdout.write(str("\t") + str("{"))
			for i in range(len(p2)):
				if (i > 0):
					sys.stdout.write(str(","))
				
				sys.stdout.write(str(p2[i]))
			
			print(str("}"))
		
		print(str("Your answer:"))
		sys.stdout.write(str("\t") + str("{"))
		for i in range(len(answer)):
			if (i > 0):
				sys.stdout.write(str(","))
			
			sys.stdout.write(str(answer[i]))
		
		print(str("}"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = ("ACB","BAC","CBA")
p1 = 1
p2 = (1,2,0)
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = ("A","C","B","C","A")
p1 = 0
p2 = (0,4,2,1,3)
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = ("LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC")
p1 = 2
p2 = (5,3,8,7,4,6,1,2,0)
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = ("BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC")
p1 = 6
p2 = (0,1,3,2,4)
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = ("XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY")
p1 = 3
p2 = (0,3,4,5,7,8,9,6,1,2)
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = ("X",)
p1 = 0
p2 = (0,)
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Fox Ciel wants to hire a new maid.
# There are n candidates for the position.
# There are m different skills a maid should have, such as cooking, cleaning, or discreetness.
# Ciel numbered the candidates 0 through n-1 and the skills 0 through m-1.
# 
# 
# 
# Ciel evaluated the level each candidate has in each of the skills.
# You are given this information encoded in a tuple (string) score with n elements, each consisting of m characters.
# For each i and j, the character score[i][j] represents the level candidate i has in skill j.
# Said character will always be between 'A' and 'Z', inclusive, where 'A' means the best possible and 'Z' the worst possible candidate.
# 
# 
# 
# You are also given an integer x.
# Ciel thinks that skill x is the most important skill a maid should have.
# 
# 
# 
# Return a tuple (integer) with n elements: the numbers of all candidates, ordered according to their level in skill x from the best to the worst.
# Candidates who have the same level in skill x should be ordered by their number in ascending order.
# 
# DEFINITION
# Class:CandidatesSelectionEasy
# Method:sort
# Parameters:tuple (string), integer
# Returns:tuple (integer)
# Method signature:def sort(self, score, x):
# 
# 
# CONSTRAINTS
# -n will be between 1 and 50, inclusive.
# -m will be between 1 and 50, inclusive.
# -score will contain exactly n elements.
# -Each element of score will contain exactly m characters.
# -Each character in each element of score will be an uppercase English letter ('A'-'Z').
# -x will be between 0 and m-1, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {"ACB", "BAC", "CBA"}
# 1
# 
# Returns: {1, 2, 0 }
# 
# The output should be {1, 2, 0}, because the level of candidate 1 in skill 1 is 'A', the level of candidate 2 in this skill is 'B', and the level of candidate 0 is 'C'.
# 
# 1)
# {"A", "C", "B", "C", "A"}
# 0
# 
# Returns: {0, 4, 2, 1, 3 }
# 
# Note that when 2 candidates have same level, they will remain in the original order.
# 
# 2)
# {"LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC"}
# 2
# 
# Returns: {5, 3, 8, 7, 4, 6, 1, 2, 0 }
# 
# 
# 
# 3)
# {"BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC"}
# 6
# 
# Returns: {0, 1, 3, 2, 4 }
# 
# 
# 
# 4)
# {"XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY"}
# 3
# 
# Returns: {0, 3, 4, 5, 7, 8, 9, 6, 1, 2 }
# 
# 
# 
# 5)
# {"X"}
# 0
# 
# Returns: {0 }
# 
# Note that we may have only one candidate as well as only 1 skill.
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
