import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class PairGameEasy:
    def able(self, a, b, c, d):
        if a == c and b == d:
        	return "Able to generate"
        while c > 0 and d > 0:
        	if c > d:
        		c -= d
        	else:
        		d -= c
        	if a == c and b == d:
        		return "Able to generate"
        return "Not able to generate"
# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, p3, hasAnswer, p4):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0) + str(",") + str(p1) + str(",") + str(p2) + str(",") + str(p3))
	print(str("]"))
	obj = PairGameEasy()
	startTime = time.clock()
	answer = obj.able(p0, p1, p2, p3)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		res = answer == p4
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
		if (hasAnswer):
			print(str("Desired answer:"))
			print(str("\t") + str("\"") + str(p4) + str("\""))
		
		print(str("Your answer:"))
		print(str("\t") + str("\"") + str(answer) + str("\""))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 1
p1 = 2
p2 = 3
p3 = 5
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 1
p1 = 2
p2 = 2
p3 = 1
p4 = "Not able to generate"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 2
p1 = 2
p2 = 2
p3 = 999
p4 = "Not able to generate"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 2
p1 = 2
p2 = 2
p3 = 1000
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 47
p1 = 58
p2 = 384
p3 = 221
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = 1000
p1 = 1000
p2 = 1000
p3 = 1000
p4 = "Able to generate"
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# You have an ordered pair of integers.
# You can now make zero or more steps.
# In each step, you can change your pair into a new pair of integers by adding one of them to the other.
# That is, if your current pair is (x, y), then your next pair will be either (x+y, y), or (x, x+y).
# 
# 
# 
# For example, you can start with (1, 2), change it to (3, 2), change that to (3, 5), and then change that again to (3, 8).
# 
# 
# 
# You are given four integers: a, b, c, and d.
# Return "Able to generate" (quotes for clarity) if it is possible to start with the pair (a, b) and end with the pair (c, d).
# Otherwise, return "Not able to generate".
# 
# DEFINITION
# Class:PairGameEasy
# Method:able
# Parameters:integer, integer, integer, integer
# Returns:string
# Method signature:def able(self, a, b, c, d):
# 
# 
# CONSTRAINTS
# -a will be between 1 and 1,000, inclusive.
# -b will be between 1 and 1,000, inclusive.
# -c will be between 1 and 1,000, inclusive.
# -d will be between 1 and 1,000, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# 1
# 2
# 3
# 5
# 
# Returns: "Able to generate"
# 
# (1, 2) -> (3, 2) -> (3, 5).
# 
# 1)
# 1
# 2
# 2
# 1
# 
# Returns: "Not able to generate"
# 
# Note that order matters: (1, 2) and (2, 1) are two different pairs.
# 
# 2)
# 2
# 2
# 2
# 999
# 
# Returns: "Not able to generate"
# 
# 
# 
# 3)
# 2
# 2
# 2
# 1000
# 
# Returns: "Able to generate"
# 
# 
# 
# 4)
# 47
# 58
# 384
# 221
# 
# Returns: "Able to generate"
# 
# 
# 
# 5)
# 1000
# 1000
# 1000
# 1000
# 
# Returns: "Able to generate"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
